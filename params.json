{"name":"Scratch Extensions","tagline":"Extensions for Scratch 2.0","body":"Writing Extensions for Scratch 2.0\r\n===================================\r\n\r\nWriting a Javascript extension for Scratch 2.0 is quite straightforward. Every extension starts with some boilerplate code, which looks like the following:\r\n\r\n```javascript\r\nnew (function() {\r\n    var ext = this;\r\n\r\n    // Cleanup function when the extension is unloaded\r\n    ext._shutdown = function() {};\r\n\r\n    // Status reporting code\r\n    // Use this to report missing hardware, plugin or unsupported browser\r\n    ext._getStatus = function() {\r\n        return {status: 2, msg: 'Ready'};\r\n    };\r\n\r\n    // Block and block menu descriptions\r\n    var descriptor = {\r\n        blocks: [\r\n        ]\r\n    };\r\n\r\n    // Register the extension\r\n    ScratchExtensions.register('Sample extension', descriptor, ext);\r\n})();\r\n```\r\n\r\nAdding Blocks\r\n--------------\r\n\r\nAn extension may define a number of blocks, of different types (e.g. a command block, or a hat block, or a reporter block). Blocks can take in parameters.\r\n\r\n### Reporter blocks\r\n\r\nTo add a simple _command_ block, there needs to be an entry in the ``descriptors.blocks`` list, and a corresponding function. The simplest block possible is shown below. The block reports back the value of  the constant Ï€.\r\n\r\n```javascript\r\nnew (function() {\r\n    var ext = this;\r\n\r\n    // Cleanup function when the extension is unloaded\r\n    ext._shutdown = function() {};\r\n\r\n    // Status reporting code\r\n    // Use this to report missing hardware, plugin or unsupported browser\r\n    ext._getStatus = function() {\r\n        return {status: 2, msg: 'Ready'};\r\n    };\r\n\r\n    ext.get_pi = function() {\r\n        return Math.PI;\r\n    }\r\n\r\n    // Block and block menu descriptions\r\n    var descriptor = {\r\n        blocks: [\r\n            ['r', 'PI', 'get_pi'],\r\n        ]\r\n    };\r\n\r\n    // Register the extension\r\n    ScratchExtensions.register('Sample extension', descriptor, ext);\r\n})();\r\n```\r\n\r\nTo add parameters to blocks, the block definition in ``descriptors.blocks`` needs to be extended.\r\n\r\n```javascript\r\nnew (function() {\r\n    var ext = this;\r\n\r\n    // Cleanup function when the extension is unloaded\r\n    ext._shutdown = function() {};\r\n\r\n    // Status reporting code\r\n    // Use this to report missing hardware, plugin or unsupported browser\r\n    ext._getStatus = function() {\r\n        return {status: 2, msg: 'Ready'};\r\n    };\r\n\r\n    ext.power = function(base, exponent) {\r\n        return Math.pow(base, exponent);\r\n    }\r\n\r\n    // Block and block menu descriptions\r\n    var descriptor = {\r\n        blocks: [\r\n            ['r', '%d ^ %d', 'power', 2, 3], \r\n            // The last two values above represent default parameter values\r\n        ]\r\n    };\r\n\r\n    // Register the extension\r\n    ScratchExtensions.register('Sample extension', descriptor, ext);\r\n})();\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}