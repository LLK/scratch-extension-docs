{"name":"Scratch Extensions","tagline":"Extensions for Scratch 2.0","body":"Writing Extensions for Scratch 2.0\r\n===================================\r\n\r\nWriting a Javascript extension for Scratch 2.0 is quite straightforward. Every extension starts with some boilerplate code, which looks like the following:\r\n\r\n```javascript\r\nnew (function() {\r\n    var ext = this;\r\n\r\n    // Cleanup function when the extension is unloaded\r\n    ext._shutdown = function() {};\r\n\r\n    // Status reporting code\r\n    // Use this to report missing hardware, plugin or unsupported browser\r\n    ext._getStatus = function() {\r\n        return {status: 2, msg: 'Ready'};\r\n    };\r\n\r\n    // Block and block menu descriptions\r\n    var descriptor = {\r\n        blocks: [\r\n        ]\r\n    };\r\n\r\n    // Register the extension\r\n    ScratchExtensions.register('Sample extension', descriptor, ext);\r\n})();\r\n```\r\n\r\nAdding Blocks\r\n--------------\r\n\r\nAn extension may define a number of blocks, of different types (e.g. a command block, or a hat block, or a reporter block). Blocks can take in parameters.\r\n\r\n### Command blocks\r\n\r\nTo add a simple _command_ block, there needs to be an entry in the ``descriptors.blocks`` list, and a corresponding function for it. The simplest block possible is shown below (it does nothing).\r\n\r\n```javascript\r\nnew (function() {\r\n    var ext = this;\r\n\r\n    // Cleanup function when the extension is unloaded\r\n    ext._shutdown = function() {};\r\n\r\n    // Status reporting code\r\n    // Use this to report missing hardware, plugin or unsupported browser\r\n    ext._getStatus = function() {\r\n        return {status: 2, msg: 'Ready'};\r\n    };\r\n\r\n    ext.my_first_block = function() {\r\n        // Code that gets executed when the block is run\r\n    };\r\n\r\n    // Block and block menu descriptions\r\n    var descriptor = {\r\n        blocks: [\r\n            // Block type, block name, function name\r\n            [' ', 'my first block', 'my_first_block'],\r\n        ]\r\n    };\r\n\r\n    // Register the extension\r\n    ScratchExtensions.register('My first extension', descriptor, ext);\r\n})();\r\n```\r\n\r\n### Command blocks that wait\r\n\r\nSometimes it is necessary to have a command block that waits (e.g. if a block plays a sound, it may be a good idea to wait till the sound playback finishes). The sample extension below implements a \"random wait\" block to show how that can be done. Note the use of the ``console.log`` statement in the code - most Javascript methods, as well as JQuery methods will work fine in an extension.\r\n\r\n```javascript\r\nnew (function() {\r\n    var ext = this;\r\n\r\n    // Cleanup function when the extension is unloaded\r\n    ext._shutdown = function() {};\r\n\r\n    // Status reporting code\r\n    // Use this to report missing hardware, plugin or unsupported browser\r\n    ext._getStatus = function() {\r\n        return {status: 2, msg: 'Ready'};\r\n    };\r\n\r\n    // Functions for block with type 'w' will get a callback function as the \r\n    // final argument. This should be called to indicate that the block can\r\n    // stop waiting.\r\n    ext.wait_random = function(callback) {\r\n        wait = Math.random();\r\n        console.log('Waiting for ' + wait + ' seconds');\r\n        window.setTimeout(function() {\r\n            callback();\r\n        }, wait*1000);\r\n    };\r\n\r\n    // Block and block menu descriptions\r\n    var descriptor = {\r\n        blocks: [\r\n            ['w', 'wait for random time', 'wait_random'],\r\n        ]\r\n    };\r\n\r\n    // Register the extension\r\n    ScratchExtensions.register('Random wait extension', descriptor, ext);\r\n})();\r\n```\r\n\r\n### Reporter blocks\r\n\r\nBlocks can also return values, and they are called _reporter_ blocks. The corresponding JavaScript function for a reporter block needs to return a value, as shown in the example below (note that this example also shows how to make blocks accept parameters).\r\n\r\n```javascript\r\nnew (function() {\r\n    var ext = this;\r\n\r\n    // Cleanup function when the extension is unloaded\r\n    ext._shutdown = function() {};\r\n\r\n    // Status reporting code\r\n    // Use this to report missing hardware, plugin or unsupported browser\r\n    ext._getStatus = function() {\r\n        return {status: 2, msg: 'Ready'};\r\n    };\r\n\r\n    ext.power = function(base, exponent) {\r\n        return Math.pow(base, exponent);\r\n    };\r\n\r\n    // Block and block menu descriptions\r\n    var descriptor = {\r\n        blocks: [\r\n            // Block type, block name, function name, param1 default value, param2 default value\r\n            ['r', '%n ^ %n', 'power', 2, 3],\r\n        ]\r\n    };\r\n\r\n    // Register the extension\r\n    ScratchExtensions.register('Sample extension', descriptor, ext);\r\n})();\r\n```\r\n\r\n### Reporter blocks that wait\r\n\r\nOne common use-case for reporter blocks is getting data from online web-services, where the blocks need to wait for the web-api call to complete. The following example shows how to fetch the current temperature of a city using an AJAX call to [Open Weather Map API](http://openweathermap.org/API). Note that the block type is _R_ instead of _r_ (which is for a non-blocking reporter).\r\n\r\n```javascript\r\nnew (function() {\r\n    var ext = this;\r\n\r\n    // Cleanup function when the extension is unloaded\r\n    ext._shutdown = function() {};\r\n\r\n    // Status reporting code\r\n    // Use this to report missing hardware, plugin or unsupported browser\r\n    ext._getStatus = function() {\r\n        return {status: 2, msg: 'Ready'};\r\n    };\r\n\r\n    ext.get_temp = function(location, callback) {\r\n        // Make an AJAX call to the Open Weather Maps API\r\n        $.ajax({\r\n              url: 'http://api.openweathermap.org/data/2.5/weather?q='+location+'&units=imperial',\r\n              dataType: 'jsonp',\r\n              success: function( weather_data ) {\r\n                  // Got the data - parse it and return the temperature\r\n                  temperature = weather_data['main']['temp'];\r\n                  callback(temperature);\r\n              }\r\n        });\r\n    };\r\n\r\n    // Block and block menu descriptions\r\n    var descriptor = {\r\n        blocks: [\r\n            ['R', 'current temperature in city %s', 'get_temp', 'Boston, MA'],\r\n        ]\r\n    };\r\n\r\n    // Register the extension\r\n    ScratchExtensions.register('Weather extension', descriptor, ext);\r\n})();\r\n```\r\n\r\n### Hat blocks\r\n\r\nHat blocks go on top of block stacks - examples of Scratch hat blocks include \"when green flag clicked\" or \"when this sprite clicked\". To create a hat block through an extension, the block type needs to be set to _h_, as shown in the example below.\r\n\r\n```javascript\r\nnew (function() {\r\n    var ext = this;\r\n    var alarm_went_off = false; // This becomes true after the alarm goes off\r\n\r\n    // Cleanup function when the extension is unloaded\r\n    ext._shutdown = function() {};\r\n\r\n    // Status reporting code\r\n    // Use this to report missing hardware, plugin or unsupported browser\r\n    ext._getStatus = function() {\r\n        return {status: 2, msg: 'Ready'};\r\n    };\r\n\r\n    ext.set_alarm = function(time) {\r\n       window.setTimeout(function() {\r\n           alarm_went_off = true;\r\n       }, time*1000);\r\n    };\r\n\r\n    ext.when_alarm = function() {\r\n       // Reset alarm_went_off if it is true, and return true\r\n       // otherwise, return false.\r\n       if (alarm_went_off === true) {\r\n           alarm_went_off = false;\r\n           return true;\r\n       }\r\n\r\n       return false;\r\n    };\r\n\r\n    // Block and block menu descriptions\r\n    var descriptor = {\r\n        blocks: [\r\n            ['', 'run alarm after %n seconds', 'set_alarm', '2'],\r\n            ['h', 'when alarm goes off', 'when_alarm'],\r\n        ]\r\n    };\r\n\r\n    // Register the extension\r\n    ScratchExtensions.register('Alarm extension', descriptor, ext);\r\n})();\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}